html {
  /* cursor: none; */
  position: relative;
  /* color: green; */
}

:root {
  --main-color: #666;
}
.lists {
  --main-color: redfwe;
}
/* 
.title {
  overflow: hidden;
  text-align: center;
}

.title .text {
  display: block;
  color: #a7a7a7;
  transform: translateY(50px);
}

.image {
  width: 160px;
  margin: auto;
  padding: 160px 0 0;
  text-align: center;
  position: relative;
}

.image .html-logo {
  width: 100%;
  height: 100%;
}

.return-logo {
  width: 80px;
  height: 80px;
}
.return-logo img {
  width: 100%;
}

.shadow {
  width: 100px;
  height: 20px;
  background-color: #4e4e4e;
  display: inline-block;
  margin: auto;
  border-radius: 50%;
  filter: blur(3px);
  position: absolute;
  bottom: 10px;
  right: calc(50% - 50px);
  z-index: -1;
}

.cursor {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 100;
}

.cursor::before {
  content: '';
  display: block;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  border: 5px solid #4e4e4e;
}

.cards {
  display: flex;
  list-style: none;
  justify-content: space-around;
}
.cards .card {
  width: 30%;
}
.cards .card img {
  width: 100%;
  height: auto;
}
.cards .card button {
  border: 1px solid #000;
} */

/* .title {
  color: var(--main-color);
  text-align: center;
}
.sub-title {
  color: var(--main-color);
  text-align: center;
  padding: 0 0 16px;
  margin: 0 20% 24px;
  border-bottom: 3px solid;
}
.lists {
  width: 80%;
  margin: auto;
  border: 1px solid var(--main-color);
  border-radius: 6px;
  padding: 24px;
  list-style: none;
}
.lists .list {
  padding: 0 0 8px;
  margin: 0 0 8px;
  border-bottom: 1px solid var(--main-color);
}
.lists .list .button {
  border: 3px solid var(--main-color);
  color: var(--main-color, red);
  border-radius: 6px;
  padding: 4px 8px;
} */

/* button {
  border: 1px solid #000;
  border-radius: 4px;
  color: #000;
  padding: 8px 12px;
}
button:hover {
  background-color: #000;
  color: #fff;
}
.primary {
  border: 1px solid #0dcaf0;
  color: #0dcaf0;
}
.primary:hover {
  background-color: #0dcaf0;
}
.danger {
  border: 1px solid #d95f6b;
  color: #d95f6b;
}
.danger:hover {
  background-color: #d95f6b;
}
.warning {
  border: 1px solid #edbf34;
  color: #edbf34;
}
.warning:hover {
  background-color: #edbf34;
} */

.button-wrapper {
  display: inline-block;
  margin: 16px;
}

button {
  border: 1px solid var(--custom-color, #000);
  color: var(--custom-color, #000);
  padding: 8px 12px;
  border-radius: 4px;
}
button:hover {
  color: #fff;
  background-color: var(--custom-color, #000);
}
.primary {
  --custom-color: #0dcaf0;
}
.danger {
  --custom-color: #d95f6b;
}
.warning {
  --custom-color: #edbf34;
}


カスタムプロパティの宣言は、ハイフン2個（--）で始まる任意のプロパティ名と保持したい値を記述することでできます。
なお、使える範囲（スコープ）も決めることができ、擬似クラス:rootで宣言すればグローバルに使用できます。
/* :root {
  --main-color: #666;　どこでも使える
} */

elementを宣言すれば、その要素内からでしかカスタムプロパティにアクセスできません。
/*
element {
  --main-color: #666; element内にある要素のみ使える
} */

宣言されたカスタムプロパティはvar(変数名)で使用することができます
特に理由がなければ:rootで宣言するのが良いでしょう。

これを以下のhtmlにあてます。
/* <h1 class="title">title</h1>
<h2 class="sub-title">subtitle</h2>
<ul class="lists">
  <li class="list">
    <p class="text-info">text</p>
    <button class="button">button</button>
  </li>
  <li class="list">
    <p class="text-info">text</p>
    <button class="button">button</button>
  </li>
</ul> */
こうなります。
何箇所か同じ色を記述していることに注目してください。

ここでカスタムプロパティにすると、変更があった場合でも繰り返し記述する必要がなくなり、
見た目も共通しているスタイルなんだなと一目でわかるようになります。


継承
同じ宣言があった場合どうなるのでしょうか。
先ほどのhtmlに以下のcssを適用するとします。
/* :root {
  --main-color: #666;
} 
.lists {
  --main-color: #666;
} */

この場合被った時点で内容は上書きされます。
--main-colorの値は親から子へと継承されていくので、
タイトル下のul要素から赤色になっているのが確認できます。

代替値
var()で指定したカスタムプロパティ自体が定義されていない場合の代替値を定義することができます。
これはカスタムプロパティに対応していないブラウザへ互換性のために使用するのではなく、あくまでも対応済みのブラウザのための「バックアップ、保険」みたいなものです。
カスタムプロパティ名が間違えていた場合などに代替値が採用されます。
関数の第一引数は使用するカスタムプロパティ、第二引数は参照されたカスタムプロパティが無効だった時に代わりに使用される値になります。
var()は引数を2個だけ受け取ります。第三引数が割り当てられた場合は代替値のセットは無効になります。

セットした値が無効だった場合
カスタムプロパティの値がスタイルに対して正しくない時は**親要素から継承された値、または初期値**があたります。
/* :root {
  --main-color: 50px;
}
.lists {
  color: red;
}
.lists .list {
  color: var(--main-color)
} */
上記cssはcolorプロパティに対して50pxという不適切な値がセットされています。
この場合、親要素(.lists)からredが継承され、文字は赤くなります。
.lists{}の記述がない場合は継承されるスタイルは無いので、初期値の#000000があたって黒色になります。

/* color: red;
color: var(--main-color, blue); */
ブラウザが対応しているかとセットした値によって4つのパターンが生まれます。
未対応のブラウザ　→　カスタムプロパティの記述は無視されるので赤色があたる
対応していて値もセット済　→　カスタムプロパティにセットした色があたる
対応していて未定義　→　代替値の青色があたる
対応していて値もセット済、しかし値が無効　→　親要素からの継承または黒色があたる
＊ちなみに対応していないブラウザはIEだけです。

IEはもう時期サポートが終わるみたいなのでフル無視の場合はカスタムプロパティだけでも良いと思います。
とはいえIEも必要なケースも多いです。
そう場合は未対応ブラウザのために普通のスタイル記述をするか、＠supportsを使って
「カスタムプロパティをサポートしていたら」用の記述をする必要があります。


スタイルがあたらない原因はセレクター?無効な値？
未定義変数を参照したり、想定していない値を入れたとしても、javascriptやtypescriptのような
分かりやすいエラーは起きません。
なので実際に表示させて、カスタムプロパティ以前にセレクターが間違っているのか、未定義なのか、値が無効なのかを調べる必要があります。
セレクターの間違い -> ディベロッパーツールの[Styles]タブにスタイルが表示されません。
未定義　-> カスタムプロパティ名が暗くなっていてカーソルを乗せると「--*** is not defined」のコメントが表示されます。
無効な値　-> [Styles]タブを開いただけだと分かりにくいですが、カスタムプロパティ名にフォーカスをあててコマンドキーを押しながらクリックすると値を確認できます。
どれにも当てはまらない場合は単にキャッシュの問題かもしれないのでキャッシュをクリアするかシークレットモードで確認してみましょう。


発展
継承と代替値の仕組みをうまく活用すればコード量を減らせます。
/* <button>BUTTON</button>
<button class="primary">BUTTON</button>
<button class="danger">BUTTON</button>
<button class="warning">BUTTON</button> */
クラスによってボタンの色を変えたい場合。
/* button {
  border: 1px solid #000;
  border-radius: 4px;
  color: #000;
  padding: 8px 12px;
}
button:hover {
  background-color: #000;
  color: #fff;
}
.primary {
  border: 1px solid #0dcaf0;
  color: #0dcaf0;
}
.primary:hover {
  background-color: #0dcaf0;
}
.danger {
  border: 1px solid #d95f6b;
  color: #d95f6b;
}
.danger:hover {
  background-color: #d95f6b;
}
.warning {
  border: 1px solid #edbf34;
  color: #edbf34;
}
.warning:hover {
  background-color: #edbf34;
} */
このcssをあてることでクラスによってそれぞれ色の違うボタンができます。
ですが、重複している記述が多いことに注目してください。
ただクラスによって色を変えているだけなのに十数行も使っています。
これを避けるためにカスタムプロパティを使ってみましょう。
/* button {
  border: 1px solid var(--custom-color, #000);
  color: var(--custom-color, #000);
  padding: 8px 12px;
  border-radius: 4px;
}
button:hover {
  color: #fff;
  background-color: var(--custom-color, #000);
}
.primary {
  --custom-color: #0dcaf0;
}
.danger {
  --custom-color: #d95f6b;
}
.warning {
  --custom-color: #edbf34;
} */
これだけですが、上記と全く同じデザインになります。
/* var(--custom-color, #000) */
で--custom-colorが定義されていなければ、代替値の黒色をセットするようにしています。
--custom-color自体は指定クラスのセレクター内で定義しているので、クラスが存在していれば--custom-color
が宣言されて各々の色がセットされるようになっています。
とても見やすくなりましたね。